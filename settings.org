* Template
    #+BEGIN_SRC emacs-lisp

    #+END_SRC 

* UI    
    #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t) 
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode -1)
    (set-fringe-mode 10)
    (menu-bar-mode -1)

    ;; setup visual bell
    (setq visible-bell t)
    #+END_SRC
    
** icons
    #+BEGIN_SRC emacs-lisp
    (use-package all-the-icons)
    #+END_SRC 
    
** modeline

    #+BEGIN_SRC emacs-lisp
    (use-package doom-modeline
	:ensure t
	:custom ((doom-modeline-height 15))
	:init (doom-modeline-mode 1))
    #+END_SRC 
  
** Line nums

    #+BEGIN_SRC emacs-lisp
    (column-number-mode)
    (global-display-line-numbers-mode t)
    ;; Disable line numbers for some modes
    (dolist (mode '(org-mode-hook
		    term-mode-hook
		    eshell-mode-hook
		    shell-mode-hook))
	(add-hook mode (lambda() (display-line-numbers-mode 0))))
    #+END_SRC 
    
** Parens

    #+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
		:hook (prog-mode . rainbow-delimiters-mode))
    #+END_SRC 


** Themes
    #+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t)
    (setq doom-themes-enable-italic t)
    (doom-themes-visual-bell-config))

  ;; Treat all themes as safe
  (setq custom-safe-themes t)

  (load-theme 'doom-vibrant)

    #+END_SRC 

* Helpers
  
** Which Key

    adds helper that displays key combo options after
    hitting a base chord (like C-x or C-h)

    #+BEGIN_SRC emacs-lisp
    (use-package which-key
	:init (which-key-mode)
	:diminish which-key-mode
	:config
	(setq which-key-idle-delay 0))
    #+END_SRC 
    
** Helpful

    #+BEGIN_SRC emacs-lisp
    (use-package helpful
	:custom
	(counsel-describe-function-function #'helpful-callable)
	(counsel-describe-variable-function #'helpful-variable)
	:bind
	([remap describe-function] . counsel-describe-function)
	([remap describe-comman] . helpful-command)
	([remap describe-variable] . counsel-describe-variable)
	([remap describe-key] . helpful-key))
    #+END_SRC 

** Key Bindings
    #+BEGIN_SRC emacs-lisp
    (use-package general
    ;:after evil
    :config
    (general-create-definer arzt/leader-keys
      :keymaps '(normal visual emacs)
      :prefix "SPC"
      :global-prefiex "C-SPC")

    (arzt/leader-keys
     "T" '(:ignore t :which-key "toggles")
     "Tt" '(counsel-load-theme :which-key "choose theme")))
    #+END_SRC 

*** Files
    #+BEGIN_SRC emacs-lisp
      (arzt/leader-keys
	"f" '(:ignore t :which-key "files")
	"ff" '(counsel-find-file :which-key "open file")
	"fc" '((lambda () (interactive) (find-file "~/.emacs.d/settings.org")) :which-key "open config"))
    #+END_SRC 

*** buffers
    #+BEGIN_SRC emacs-lisp
      (arzt/leader-keys
	"b" '(:ignore t :which-key "buffers")
	"bb" '(:ignore t :wich-key "switch buffers")
	"bbb" '(ido-switch-buffer :which-key "in this buffer")
	"bbs" '(ido-switch-buffer-other-window :which-key "in other window")
	"bp" '(previous-buffer :which-key "previous buffer")
	"bn" '(switch-to-next-buffer :which-key "next buffer"))
    #+END_SRC

*** windows
    #+BEGIN_SRC emacs-lisp
      (arzt/leader-keys
	"w" '(:ignore t :which-key "windows")
	"w/" '(evil-window-vsplit :which-key "split side-by-side")
	"w-" '(evil-window-split :which-key "split above-below"))
    #+END_SRC



** Hydra
    #+BEGIN_SRC emacs-lisp
    (use-package hydra)
    (defhydra hydra-text-scale (:timeout 4)
	"scale text"
	("j" text-scale-increase "in")
	("k" text-scale-decrease "out")
	("f" nil "finished" :exit t))

      (arzt/leader-keys
       "ts" '(hydra-text-scale/body :which-key "scale-text"))
    #+END_SRC 

** Treemacs
    #+BEGIN_SRC emacs-lisp
    (use-package treemacs
      :ensure t
      :defer t
      :init
      (with-eval-after-load 'winum
        (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
      :config
      (progn
        (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
              treemacs-deferred-git-apply-delay      0.5
              treemacs-directory-name-transformer    #'identity
              treemacs-display-in-side-window        t
              treemacs-eldoc-display                 t
              treemacs-file-event-delay              5000
              treemacs-file-extension-regex          treemacs-last-period-regex-value
              treemacs-file-follow-delay             0.2
              treemacs-file-name-transformer         #'identity
              treemacs-follow-after-init             t
              treemacs-git-command-pipe              ""
              treemacs-goto-tag-strategy             'refetch-index
              treemacs-indentation                   2
              treemacs-indentation-string            " "
              treemacs-is-never-other-window         nil
              treemacs-max-git-entries               5000
              treemacs-missing-project-action        'ask
              treemacs-move-forward-on-expand        nil
              treemacs-no-png-images                 nil
              treemacs-no-delete-other-windows       t
              treemacs-project-follow-cleanup        nil
              treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
              treemacs-position                      'left
              treemacs-recenter-distance             0.1
              treemacs-recenter-after-file-follow    nil
              treemacs-recenter-after-tag-follow     nil
              treemacs-recenter-after-project-jump   'always
              treemacs-recenter-after-project-expand 'on-distance
              treemacs-show-cursor                   nil
              treemacs-show-hidden-files             t
              treemacs-silent-filewatch              nil
              treemacs-silent-refresh                nil
              treemacs-sorting                       'alphabetic-asc
              treemacs-space-between-root-nodes      t
              treemacs-tag-follow-cleanup            t
              treemacs-tag-follow-delay              1.5
              treemacs-user-mode-line-format         nil
              treemacs-user-header-line-format       nil
              treemacs-width                         35
              treemacs-workspace-switch-cleanup      nil)
    
        ;; The default width and height of the icons is 22 pixels. If you are
        ;; using a Hi-DPI display, uncomment this to double the icon size.
        ;;(treemacs-resize-icons 44)
    
        (treemacs-follow-mode t)
        (treemacs-filewatch-mode t)
        (treemacs-fringe-indicator-mode t)
        (pcase (cons (not (null (executable-find "git")))
                     (not (null treemacs-python-executable)))
          (`(t . t)
           (treemacs-git-mode 'deferred))
          (`(t . _)
           (treemacs-git-mode 'simple))))
      :bind
      (:map global-map
            ("M-0"       . treemacs-select-window)
            ("C-x t 1"   . treemacs-delete-other-windows)
            ("C-x t t"   . treemacs)
            ("C-x t B"   . treemacs-bookmark)
            ("C-x t C-t" . treemacs-find-file)
            ("C-x t M-t" . treemacs-find-tag)))
    
    (use-package treemacs-evil
      :after treemacs evil
      :ensure t)
    
    (use-package treemacs-projectile
      :after treemacs projectile
      :ensure t)
    
    (use-package treemacs-icons-dired
      :after treemacs dired
      :ensure t
      :config (treemacs-icons-dired-mode))
    
    (use-package treemacs-magit
      :after treemacs magit
      :ensure t)
    
    (use-package treemacs-persp ;;treemacs-persective if you use perspective.el vs. persp-mode
      :after treemacs persp-mode ;;or perspective vs. persp-mode
      :ensure t
      :config (treemacs-set-scope-type 'Perspectives))
    #+END_SRC 

** Treemacs keybindings
     #+BEGIN_SRC emacs-lisp
    (arzt/leader-keys
     "t" '(:ignore t :which-key "treemacs")
     "tt" '(treemacs :which-key "open"))
    #+END_SRC 

** Company
    #+BEGIN_SRC emacs-lisp
      (use-package company
	:ensure t
	:config (add-hook 'after-init-hook 'global-company-mode))
    #+END_SRC 
 
* QOL fixes
    #+BEGIN_SRC emacs-lisp

    ;; Make ESC quit prompts
    (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

    #+END_SRC 

* Ivy
    #+BEGIN_SRC emacs-lisp
      (use-package counsel
      :bind (("M-x" . counsel-M-x)
	      ("C-x b" . counsel-ibuffer)
	      ("C-x C-f" . counsel-find-file)
	      :map minibuffer-local-map
	      ("C-r" . 'counsel-minibuffer-history))
      ([remap load-theme] . consel-load-theme)

      :config
      (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^

      (use-package ivy
	:diminish ;; hide this mode name from list at bottom
	:bind (("C-s" . swiper)
		("C-l" . ivy-alt-done)
		("C-j" . ivy-next-line)
		("C-k" . ivy-previous-line)
		:map ivy-switch-buffer-map
		("C-k" . ivy-previus-line)
		("C-l" . ivy-done)
		("C-d" . ivy-switch-buffer-kill)
		:map ivy-reverse-i-search-map
		("C-k" . ivy-previous-line)
		("C-d" . ivy-reverse-i-search-kill))
	:config (ivy-mode 1))

      (use-package ivy-rich
	:init (ivy-rich-mode 1))



    #+END_SRC 

* EVIL

    #+BEGIN_SRC emacs-lisp
    (use-package evil
	:init
	(setq evil-want-integration t)
	(setq evil-want-keybinding nil)
	(setq evil-want-C-u-scroll t)
	(setq evil-want-C-i-jump nil)
	:config
	(evil-mode 1)
	(define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

	;; use visual line motions outside of visual-line-mode buffers
	(evil-global-set-key 'motion "j" 'evil-next-visual-line)
	(evil-global-set-key 'motion "k" 'evil-previous-visual-line)
	(evil-set-initial-state 'messages-buffer-mode 'normal)
	(evil-set-initial-state 'dashboard-mode 'normal))

;    (use-package evil-collection
;	:after evil
;	:ensure t
;	:config
;	(evil-collection-init))
    #+END_SRC

* Org
    #+BEGIN_SRC emacs-lisp
      (use-package org
      :config
      (arzt/leader-keys
       "o" '(:ignore t :which-key "org")
       "ob" '(:ignore t :which-key "babel")
       "obs" '(org-babel-execute-src-block :which-key "execute src block"))

	(use-package org-bullets
	    :ensure t
	    :init
	    (setq org-bullets-bullet-list
		'("◉" "◎" "⚫""○" "►" "◇"))
	    (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1)))))
      (eval-when-compile
	(require 'cl-lib))
      (defun org+-substitute-yes-or-no-p (fun &rest args)
	"Run FUN with ARGS and `yes-or-no-p' locally substituted by `y-or-n-p'."
	(cl-letf (((symbol-function 'yes-or-no-p) #'y-or-n-p))
	  (apply fun args)))

      (advice-add 'org-babel-confirm-evaluate :around #'org+-substitute-yes-or-no-p)
    #+END_SRC

* Project Stuff
** Projectile
    #+BEGIN_SRC emacs-lisp
      (use-package projectile
	:diminish projectile
	:config (projectile-mode)
	:custom ((projectile-completion-system 'ivy))
	:bind-keymap ("C-c p" . projectile-command-map)
	:init
	(when (file-directory-p "~/repos/*")
	  (setq projectile-project-search-path '("~/repos/*")))
	(setq projectile-switch-project-action #'projectile-dired))

	 (arzt/leader-keys
	   "p" '(projectile-command-map :which-key "project"))
    #+END_SRC 

** Counsel-projectile
    #+BEGIN_SRC emacs-lisp
      (use-package counsel-projectile
	:config (counsel-projectile-mode))
    #+END_SRC 

* Languages
  
** LSP
    #+BEGIN_SRC emacs-lisp
      (use-package eglot :ensure t)
    #+END_SRC 


    
** Python
    #+BEGIN_SRC emacs-lisp
	  (use-package lsp-pyright
	      :ensure t
	      :hook (python-mode . (lambda ()
				     (require 'lsp-pyright)
				     (lsp-deferred)))) 
    #+END_SRC 


* Magit
    #+BEGIN_SRC emacs-lisp
      (use-package magit
	:commands (magit-status magit-get-current-branch)
	:custom
	(magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

      (use-package evil-magit
	:after magit)
	
      (arzt/leader-keys
       "g" '(:ignore t :which-key "git")
       "gs" '(magit-status :which-key "status"))


    #+END_SRC 

